
<?php
require_once '../config.php';

// Set headers for JSON response
header('Content-Type: application/json; charset=utf-8');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: GET, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type');

// Handle preflight requests
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    http_response_code(200);
    exit;
}

// Get channel name from query parameters
$channelName = isset($_GET['channel']) ? $_GET['channel'] : null;

if (!$channelName) {
    echo json_encode([
        'success' => false,
        'message' => '–ù–µ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä channel'
    ]);
    exit;
}

try {
    // Get bot token from settings
    $stmt = $pdo->prepare('SELECT setting_value FROM site_settings WHERE setting_key = ?');
    $stmt->execute(['telegram_bot_token']);
    $result = $stmt->fetch(PDO::FETCH_ASSOC);
    
    $botToken = $result ? $result['setting_value'] : null;
    
    if (!$botToken) {
        echo json_encode([
            'success' => false,
            'message' => '–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö'
        ]);
        exit;
    }
    
    // Function to fetch posts from Telegram channel
    function fetchChannelPosts($botToken, $channelName, $limit = 10) {
        $url = "https://api.telegram.org/bot{$botToken}/getUpdates";
        
        // Alternative approach using chat history
        $url = "https://api.telegram.org/bot{$botToken}/getChat?chat_id=@{$channelName}";
        $chatResponse = @file_get_contents($url);
        
        if ($chatResponse === false) {
            return [
                'success' => false,
                'message' => '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API Telegram'
            ];
        }
        
        $chatData = json_decode($chatResponse, true);
        
        if (!$chatData['ok']) {
            return [
                'success' => false,
                'message' => $chatData['description'] ?? '–û—à–∏–±–∫–∞ API Telegram'
            ];
        }
        
        $chatId = $chatData['result']['id'];
        
        // Now get messages from the channel
        $messagesUrl = "https://api.telegram.org/bot{$botToken}/getUpdates?chat_id={$chatId}&limit={$limit}";
        $messagesResponse = @file_get_contents($messagesUrl);
        
        if ($messagesResponse === false) {
            return [
                'success' => false,
                'message' => '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram'
            ];
        }
        
        $messagesData = json_decode($messagesResponse, true);
        
        if (!$messagesData['ok']) {
            return [
                'success' => false,
                'message' => $messagesData['description'] ?? '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π'
            ];
        }
        
        // Process and format messages
        $posts = [];
        foreach ($messagesData['result'] as $update) {
            if (isset($update['channel_post'])) {
                $post = $update['channel_post'];
                $postData = [
                    'id' => $post['message_id'],
                    'date' => $post['date'],
                    'message' => $post['text'] ?? ''
                ];
                
                // Add photo if present
                if (isset($post['photo'])) {
                    // Get the largest photo
                    $photo = end($post['photo']);
                    $fileId = $photo['file_id'];
                    
                    // Get file path
                    $fileUrl = "https://api.telegram.org/bot{$botToken}/getFile?file_id={$fileId}";
                    $fileResponse = @file_get_contents($fileUrl);
                    $fileData = json_decode($fileResponse, true);
                    
                    if ($fileData['ok']) {
                        $filePath = $fileData['result']['file_path'];
                        $postData['photo'] = "https://api.telegram.org/file/bot{$botToken}/{$filePath}";
                    }
                }
                
                $posts[] = $postData;
            }
        }
        
        // Mock data for development/testing if no posts found
        if (empty($posts)) {
            $posts = getMockPosts();
        }
        
        return [
            'success' => true,
            'posts' => $posts
        ];
    }
    
    // Function to generate mock posts for development
    function getMockPosts() {
        $mockPosts = [];
        $currentTime = time();
        
        $messages = [
            "üî• –ì–æ—Ä—è—á–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! Toyota Camry 2023 –≥–æ–¥–∞ –≤—Å–µ–≥–æ –∑–∞ 2.8 –º–ª–Ω —Ä—É–±. –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–æ–±–µ–≥. #toyota #camry",
            "‚ùóÔ∏è –ù–æ–≤–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ: BMW X5 2022 –≥–æ–¥–∞. –ü–æ–ª–Ω–∞—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è, –ø–∞–Ω–æ—Ä–∞–º–Ω–∞—è –∫—Ä—ã—à–∞, –∫–æ–∂–∞–Ω—ã–π —Å–∞–ª–æ–Ω. –ó–≤–æ–Ω–∏—Ç–µ! #bmw #x5",
            "üì¢ –¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è! –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Volkswagen Tiguan. –°–∫–∏–¥–∫–∞ 150,000 —Ä—É–± –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏. #volkswagen #tiguan",
            "‚ö°Ô∏è Mercedes-Benz E-Class 2023 –≥–æ–¥–∞ - —Ä–æ—Å–∫–æ—à—å –∏ –∫–æ–º—Ñ–æ—Ä—Ç. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Å–ø–µ—à–∏—Ç–µ! #mercedes #eclass",
            "üöò Honda Accord 2022 - —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏. –í –Ω–∞–ª–∏—á–∏–∏ —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞! #honda #accord"
        ];
        
        for ($i = 0; $i < 5; $i++) {
            $mockPosts[] = [
                'id' => $i + 1,
                'date' => $currentTime - ($i * 86400), // One day apart
                'message' => $messages[$i],
                'photo' => "https://picsum.photos/600/400?random=" . ($i + 1)
            ];
        }
        
        return $mockPosts;
    }
    
    // Fetch channel posts
    $result = fetchChannelPosts($botToken, $channelName);
    
    echo json_encode($result);
    
} catch (PDOException $e) {
    echo json_encode([
        'success' => false,
        'message' => '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ' . $e->getMessage()
    ]);
} catch (Exception $e) {
    echo json_encode([
        'success' => false,
        'message' => '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' . $e->getMessage()
    ]);
}
?>
