
import { useState, useCallback } from 'react';
import { useToast } from '@/hooks/use-toast';
import { useSettings } from '@/hooks/useSettings';
import { Order } from '@/types/car';

export const useTelegramNotifications = () => {
  const [loading, setLoading] = useState<boolean>(false);
  const { settings } = useSettings();
  const { toast } = useToast();
  
  const TELEGRAM_TOKEN = '7816899565:AAF_OIH114D1Ijlg_r6_xAq1un5jy5X4w7Y';
  const TELEGRAM_API_BASE = `https://api.telegram.org/bot${TELEGRAM_TOKEN}`;
  const TELEGRAM_CHANNEL = '@VoeAVTO'; // –ö–∞–Ω–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è adminNotifyList –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const getNotificationRecipients = useCallback(() => {
    const adminList = settings?.adminNotifyList;
    
    if (!adminList || adminList === '') {
      // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª
      return [TELEGRAM_CHANNEL];
    }
    
    // –†–∞–∑–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
    const recipients = adminList.split(',').map(id => id.trim());
    recipients.push(TELEGRAM_CHANNEL); // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª
    
    return recipients;
  }, [settings]);

  const notifyNewOrder = useCallback(async (order: Order) => {
    try {
      setLoading(true);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
      const recipients = getNotificationRecipients();
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const message = `
üìã *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*
  
üöó *–ê–≤—Ç–æ–º–æ–±–∏–ª—å:* ${order.carDetails?.make || ''} ${order.carDetails?.model || ''}
üí∞ *–¶–µ–Ω–∞:* ${order.amount?.toLocaleString() || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} —Ä—É–±.
üë§ *–ö–ª–∏–µ–Ω—Ç:* ${order.customerName || '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
‚òéÔ∏è *–¢–µ–ª–µ—Ñ–æ–Ω:* ${order.customerPhone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìù *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${order.customerComment || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}
      `;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
      const sendPromises = recipients.map(recipient => {
        // –ï—Å–ª–∏ —ç—Ç–æ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º sendMessage
        const sendMethod = recipient.startsWith('@') ? 'sendMessage' : 'sendMessage';
        const chatId = recipient;
        
        return fetch(`${TELEGRAM_API_BASE}/${sendMethod}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            chat_id: chatId,
            text: message,
            parse_mode: 'Markdown',
          }),
        });
      });
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      await Promise.all(sendPromises);
      
      console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${recipients.length} –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º`);
      
      return true;
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', err);
      
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"
      });
      
      return false;
    } finally {
      setLoading(false);
    }
  }, [getNotificationRecipients, toast]);

  return {
    notifyNewOrder,
    loading
  };
};
